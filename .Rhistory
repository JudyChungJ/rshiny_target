mutate(test2, totn=n[i]+n[i-1]),
mutate(test2, totn=n))
for (i in 2:length(test2)) {
ifelse(test2$state[i]==test2$state[i-1],
mutate(test2, totn=n[i]+n[i-1]),
mutate(test2, totn=n))
}
ifelse(test2$state[i]==test2$state[i-1],
print(sum),
print(n)
}
for (i in 2:length(test2)) {
ifelse(test2$state[i]==test2$state[i-1],
print('sum'),
print('n')
}
ifelse(test2$state[i]==test2$state[i-1],
print('sum'),
print('n'))
print(i)
dim(test2)
length(test2)
for (i in 2:length(test2$n)) {
print(i)
}
for (i in 2:length(test2$n)) {
ifelse(test2$state[i]==test2$state[i-1],
print('sum'),
print('n'))
}
test2 %>%
mutate(totn=n)
for (i in 2:length(test3$n)) {
ifelse(test3$state[i]==test3$state[i-1],
test3$totn[i]=n[i]+n[i-1]),
test3 = test2 %>%
mutate(totn=n)
for (i in 2:length(test3$n)) {
ifelse(test3$state[i]==test3$state[i-1],
test3$totn[i]=n[i]+n[i-1]),
for (i in 2:length(test3$n)) {
ifelse(test3$state[i]==test3$state[i-1],
test3$totn[i]=n[i]+n[i-1],
for (i in 2:length(test3$n)) {
ifelse(test3$state[i]==test3$state[i-1],
test3$totn[i]=totn[i]+totn[i-1],
ifelse(test3$state[i]==test3$state[i-1],
(test3$totn[i]=totn[i]+totn[i-1]),
(test3$totn[i]=test3$totn[i]))
for (i in 2:length(test3$n)) {
ifelse(test3$state[i]==test3$state[i-1],
(test3$totn[i]=test3$totn[i]+test3$totn[i-1]),
(test3$totn[i]=test3$totn[i]))
}
test3
dfyr = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(state, open_year) %>%
summarize(n=n())
dfyr = dfyr %>%
mutate(totn=n)
for (i in 2:length(dfyr$n)) {
ifelse(dfyr$state[i]==dfyr$state[i-1],
(dfyr$totn[i]=dfyr$totn[i]+dfyr$totn[i-1]),
(dfyr$totn[i]=dfyr$totn[i]))
}
dfyr
# line graph the total store numbers
dfyr %>%
ggplot(aes(x=open_year, y=totn))+
geom_line()
# line graph the total store numbers
dfyr %>%
ggplot(aes(x=open_year, y=totn))+
geom_line(aes(color=state,group = state))
dfyr %>%
ggplot(aes(x=open_year, y=totn))+
geom_line(aes(color=state,group = NA))
dfyr = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
# graph year by total number of stores by that year and state
# add open_year col as numeric and n summarize
dfyrs = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(state, open_year) %>%
summarize(n=n())
# add totn column for for loop
dfyrs = dfyrs %>%
mutate(totn=n)
# for loop to add previous year number of stores to current to get total stores by year
for (i in 2:length(dfyrs$n)) {
ifelse(dfyrs$state[i]==dfyrs$state[i-1],
(dfyrs$totn[i]=dfyrs$totn[i]+dfyrs$totn[i-1]),
(dfyrs$totn[i]=dfyrs$totn[i]))
}
dfyr
# line graph the total store numbers
dfyr %>%
ggplot(aes(x=open_year, y=totn))+
geom_line(aes(color=state,group = state))
# graph year by total number of stores by that year and state
# add open_year col as numeric and n summarize
dfyrs = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(state, open_year) %>%
summarize(n=n())
# add totn column for for loop
dfyrs = dfyrs %>%
mutate(totn=n)
# for loop to add previous year number of stores to current to get total stores by year
for (i in 2:length(dfyrs$n)) {
ifelse(dfyrs$state[i]==dfyrs$state[i-1],
(dfyrs$totn[i]=dfyrs$totn[i]+dfyrs$totn[i-1]),
(dfyrs$totn[i]=dfyrs$totn[i]))
}
dfyrs
# line graph the total store numbers
dfyrs %>%
ggplot(aes(x=open_year, y=totn))+
geom_line(aes(color=state,group = state))
dfyrs
dfyrs
# line graph the total store numbers
dfyrs %>%
ggplot(aes(x=open_year, y=totn))+
geom_line(aes(color=state,group = state))
# graph year by total number of stores by that year
# add open_year col as numeric and n summarize
dfyr = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
# add totn column for for loop
dfyr = dfyr %>%
mutate(totn=n)
# for loop to add previous year number of stores to current to get total stores by year
for (i in 2:length(dfyr$n)) {
ifelse(dfyr$state[i]==dfyr$state[i-1],
(dfyr$totn[i]=dfyr$totn[i]+dfyr$totn[i-1]),
(dfyr$totn[i]=dfyr$totn[i]))
}
dfyr
# line graph the total store numbers
dfyr %>%
ggplot(aes(x=open_year, y=totn))+
geom_line(aes(color=state,group = state))
View(dfyr)
dfyr
dfyr = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
dfyr = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
dfyr
dfyr=NULL
dfyr
# add open_year col as numeric and n summarize
dfyr = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
# add totn column for for loop
dfyr = dfyr %>%
mutate(totn=n)
dfyr = null
dfyr = NULL
head(dfry)
head(dfyr)
df =read.csv('./data/target.csv')
str(df)
head(df)
df = df %>%
select(city=Address.City,
county=Address.County,
state=Address.Subdivision,
lat=Address.Latitude,
lon=Address.Longitude,
address=Address.FormattedAddress,
intersection=Address.IntersectionDescription,
storeID=AlternateIdentifier.ID,
remod_date=LocationMilestones.LastRemodelDate,
open_date=LocationMilestones.OpenDate,
name=Name,
type=SubTypeDescription,
beginMF=BeginTime.MF,
beginSa=BeginTime.Sat,
beginSu=BeginTime.Sun,
capability=AllCapability)
head(df$open_date)
df$open_date = readr::parse_datetime(df$open_date)
df$remod_date = readr::parse_datetime(df$open_date)
head(df$open_date)
df$open_date = readr::parse_datetime(df$open_date)
df =read.csv('./data/target.csv')
str(df)
head(df)
df = df %>%
select(city=Address.City,
county=Address.County,
state=Address.Subdivision,
lat=Address.Latitude,
lon=Address.Longitude,
address=Address.FormattedAddress,
intersection=Address.IntersectionDescription,
storeID=AlternateIdentifier.ID,
remod_date=LocationMilestones.LastRemodelDate,
open_date=LocationMilestones.OpenDate,
name=Name,
type=SubTypeDescription,
beginMF=BeginTime.MF,
beginSa=BeginTime.Sat,
beginSu=BeginTime.Sun,
capability=AllCapability)
head(df$open_date)
df$open_date = readr::parse_datetime(df$open_date)
df$remod_date = readr::parse_datetime(df$remod_date)
class(df$open_date)
class(df$remod_date)
class(df$open_date)
# add open_year col as numeric and n summarize
dfyr = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
dfyr
remove(dfyr)
# add open_year col as numeric and n summarize
dfyrs = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(state, open_year) %>%
summarize(n=n())
head(dfyr)
head(dfyr)
remove(dfyr)
rm(dfyr)
# add open_year col as numeric and n summarize
dfy = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
head(dfy)
head(df)
head(df)
head(df)
df =read.csv('./data/target.csv')
str(df)
head(df)
head(df)
df = df %>%
select(city=Address.City,
county=Address.County,
state=Address.Subdivision,
lat=Address.Latitude,
lon=Address.Longitude,
address=Address.FormattedAddress,
intersection=Address.IntersectionDescription,
storeID=AlternateIdentifier.ID,
remod_date=LocationMilestones.LastRemodelDate,
open_date=LocationMilestones.OpenDate,
name=Name,
type=SubTypeDescription,
beginMF=BeginTime.MF,
beginSa=BeginTime.Sat,
beginSu=BeginTime.Sun,
capability=AllCapability)
# remod date and open date parse datetime
head(df$open_date)
df$open_date = readr::parse_datetime(df$open_date)
df$remod_date = readr::parse_datetime(df$remod_date)
class(df$open_date)
# first strip, then separate by ',', then gather and drop key column
temp=df %>%
mutate(capability = gsub('\\[','', capability)) %>%
mutate(capability = gsub('\\]','', capability)) %>%
mutate(capability = gsub("'",'', capability)) %>%
mutate(capability = gsub(" ",'', capability)) %>%
mutate(capability = gsub('Caf\xfc\xbe\x8e\x96\x94\xbc','Cafe',capability))
temp=separate(temp,capability,
into=c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v14','v15','v16','v17'),sep=',', remove=TRUE)
dfc=gather(temp, key='col', value='capability', v1:v17, na.rm=TRUE)
dfc$col = NULL
head(dfc)
unique(dfc$capability)
dfc %>%
group_by(state) %>%
mutate(n_state=n()) %>%
group_by(state,capability) %>%
summarise(norm_cap=mean(n()/n_state)) %>%
arrange(desc(norm_cap))
dfc %>%
group_by(capability) %>%
summarise(n=n()) %>%
arrange(desc(n))
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(capability=='FreshGrocery') %>%
group_by(state) %>%
summarise(mean(n_state),ngrocery=n(), p_cap = mean(ngrocery/n_state)) %>%
arrange(desc(ngrocery))
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(capability=='Bakery') %>%
group_by(state) %>%
summarise(mean(n_state),nbakery=n(), p_cap = mean(nbakery/n_state)) %>%
arrange(desc(nbakery))
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(capability=='MinuteClinic') %>%
group_by(state) %>%
summarise(mean(n_state),nbakery=n(), p_cap = mean(nbakery/n_state)) %>%
arrange(desc(nbakery))
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(capability=='AcceptsWIC') %>%
group_by(state) %>%
summarise(mean(n_state),nbakery=n(), p_cap = mean(nbakery/n_state)) %>%
arrange(desc(nbakery))
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(capability=='Starbucks') %>%
group_by(state) %>%
summarise(mean(n_state),nbakery=n(), p_cap = mean(nbakery/n_state)) %>%
arrange(desc(nbakery))
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(capability=='Optical') %>%
group_by(state) %>%
summarise(mean(n_state),nbakery=n(), p_cap = mean(nbakery/n_state)) %>%
arrange(desc(nbakery))
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(capability=='Starbucks') %>%
group_by(state) %>%
summarise(mean(n_state),nbakery=n(), p_cap = mean(nbakery/n_state)) %>%
arrange(desc(nbakery))
dfc %>%
group_by(type) %>%
summarise(n=n()) %>%
arrange(desc(n))
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(type=='SuperTarget') %>%
group_by(state) %>%
summarise(mean(n_state),nbakery=n(), p_cap = mean(nbakery/n_state)) %>%
arrange(desc(nbakery))
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(type=='City') %>%
group_by(state) %>%
summarise(mean(n_state),nbakery=n(), p_cap = mean(nbakery/n_state)) %>%
arrange(desc(nbakery))
# weirdly WA, OR west coast state have smaller city targets NY and CA have them
dfc %>%
group_by(state) %>%
mutate(n_state=n_distinct(storeID)) %>%
filter(type=='TargetExpress') %>%
group_by(state) %>%
summarise(mean(n_state),nbakery=n(), p_cap = mean(nbakery/n_state)) %>%
arrange(desc(nbakery))
# kind of correlates with state university numbers http://www.univsearch.com/state.php
mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
# add open_year col as numeric and n summarize
dfy = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
head(dfy)
# add totn column for for loop
dfyt = dfy %>%
mutate(totn=n)
head(dfy)
head(dfyt)
library(tidyverse)
library(plotly)
library(openintro) #state abb
library(dygraphs)
library(tidyverse)
library(plotly)
library(openintro) #state abb
library(dygraphs)
df =read.csv('./data/target.csv')
str(df)
head(df)
df = df %>%
select(city=Address.City,
county=Address.County,
state=Address.Subdivision,
lat=Address.Latitude,
lon=Address.Longitude,
address=Address.FormattedAddress,
intersection=Address.IntersectionDescription,
storeID=AlternateIdentifier.ID,
remod_date=LocationMilestones.LastRemodelDate,
open_date=LocationMilestones.OpenDate,
name=Name,
type=SubTypeDescription,
beginMF=BeginTime.MF,
beginSa=BeginTime.Sat,
beginSu=BeginTime.Sun,
capability=AllCapability)
# remod date and open date parse datetime
head(df$open_date)
df$open_date = readr::parse_datetime(df$open_date)
df$remod_date = readr::parse_datetime(df$remod_date)
class(df$open_date)
# first strip, then separate by ',', then gather and drop key column
temp=df %>%
mutate(capability = gsub('\\[','', capability)) %>%
mutate(capability = gsub('\\]','', capability)) %>%
mutate(capability = gsub("'",'', capability)) %>%
mutate(capability = gsub(" ",'', capability)) %>%
mutate(capability = gsub('Caf\xfc\xbe\x8e\x96\x94\xbc','Cafe',capability))
temp=separate(temp,capability,
into=c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v14','v15','v16','v17'),sep=',', remove=TRUE)
dfc=gather(temp, key='col', value='capability', v1:v17, na.rm=TRUE)
dfc$col = NULL
head(dfc)
unique(dfc$capability)
dfy = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
head(dfy)
head(dfy)
head(dfy)
# add totn column for for loop
dfyt = dfy %>%
mutate(totn=n)
head(dfyt)
library(tidyverse)
library(plotly)
library(openintro) #state abb
library(dygraphs)
warnings()
!diagnostics off
library(tidyverse)
library(plotly)
library(openintro) #state abb
library(dygraphs)
df =read.csv('./data/target.csv')
str(df)
head(df)
df = df %>%
select(city=Address.City,
county=Address.County,
state=Address.Subdivision,
lat=Address.Latitude,
lon=Address.Longitude,
address=Address.FormattedAddress,
intersection=Address.IntersectionDescription,
storeID=AlternateIdentifier.ID,
remod_date=LocationMilestones.LastRemodelDate,
open_date=LocationMilestones.OpenDate,
name=Name,
type=SubTypeDescription,
beginMF=BeginTime.MF,
beginSa=BeginTime.Sat,
beginSu=BeginTime.Sun,
capability=AllCapability)
# remod date and open date parse datetime
head(df$open_date)
df$open_date = readr::parse_datetime(df$open_date)
df$remod_date = readr::parse_datetime(df$remod_date)
class(df$open_date)
# first strip, then separate by ',', then gather and drop key column
temp=df %>%
mutate(capability = gsub('\\[','', capability)) %>%
mutate(capability = gsub('\\]','', capability)) %>%
mutate(capability = gsub("'",'', capability)) %>%
mutate(capability = gsub(" ",'', capability)) %>%
mutate(capability = gsub('Caf\xfc\xbe\x8e\x96\x94\xbc','Cafe',capability))
temp=separate(temp,capability,
into=c('v1','v2','v3','v4','v5','v6','v7','v8','v9','v10','v11','v12','v13','v14','v15','v16','v17'),sep=',', remove=TRUE)
dfc=gather(temp, key='col', value='capability', v1:v17, na.rm=TRUE)
dfc$col = NULL
head(dfc)
unique(dfc$capability)
# graph year by total number of stores by that year
head(df)
dfy = mutate(df,open_year = format(df$open_date, "%Y")) %>%
mutate(open_year=(as.numeric(open_year))) %>%
group_by(open_year) %>%
summarize(n=n())
head(dfy)
# add totn column for for loop
dfyt = dfy %>%
mutate(totn=n)
head(dfyt)
ifelse(dfyt$state[i]==dfyt$state[i-1],
(dfyt$totn[i]=dfyt$totn[i]+dfyr$totn[i-1]),
(dfyt$totn[i]=dfyt$totn[i]))
library(tidyverse)
library(plotly)
library(openintro) #state abb
library(dygraphs)
