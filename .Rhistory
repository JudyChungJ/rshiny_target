10:15
class(c(1, 'a')) #character
c(1:4)
class(10:15)
class(c(1, 'a')) #character
c(1:4)
10:15
class(c(1, 'a')) #character
sin(0)
log(100,10)
x = c(1,2,3,4,4)
exp(x)
mean(x)
length(x)
matrix(1:12,4,3) #vector, nrow=, ncol=
#or this way
vec = 1:12
dim(vec) = c(4,3)
attributes(vec)[1]
matrix(1:12,4,3) #vector, nrow=, ncol=
#or this way
vec = 1:12
dim(vec) = c(4,3)
type(attributes(vec))
matrix(1:12,4,3) #vector, nrow=, ncol=
#or this way
vec = 1:12
dim(vec) = c(4,3)
class(attributes(vec))
attributes(vec)[1][1]
attributes(vec)[1][2]
attributes(vec)[1][1][1]
attributes(vec)[1,]
attributes(vec)[1[1]]
class(attributes(vec)[1])
class(attributes(vec)[[1]])
attributes(vec)[[1]]
attributes(vec)[[1]][1]
dim(vec)
dim(vec)[1]
vector1 = 1:4
vector2 = 5:8
vector3 = 9:12
cbind(vector1, vector2, vector3)
rbind(vector1, vector2, vector3)
class(colnames(citydf)) # get column names
city = c('Seattle', 'Chicago', 'Boston', 'Houston')
temp = c(78, 74, 50, 104)
citydf = data.frame(city, temp)
class(colnames(citydf)) # get column names
city = c('Seattle', 'Chicago', 'Boston', 'Houston')
temp = c(78, 74, 50, 104)
citydf = data.frame(city, temp, row.names('a','b','c','d'))
citydf = data.frame(city, temp, row.names('a','b','c','d'))
citydf
city = c('Seattle', 'Chicago', 'Boston', 'Houston')
temp = c(78, 74, 50, 104)
citydf = data.frame(city, temp, row.names=c('a','b','c','d'))
colnames(citydf) # get column names in vector form
colnames(citydf) = c('CITY', 'TEMP') # rename columns
citydf[1,2] # nrow=, ncolumn=
citydf[1,1:3]
city = c('Seattle', 'Chicago', 'Boston', 'Houston')
temp = c(78, 74, 50, 104)
citydf = data.frame(city, temp, row.names=c('a','b','c','d'))
colnames(citydf) # get column names in vector form
colnames(citydf) = c('CITY', 'TEMP') # rename columns
citydf[1,2] # nrow=, ncolumn=
citydf[1:3,1]
citydf[c(1,3),] # get rows 1 and three and all columns
citydf[-1,] # everything but first row
# all the same way to get column
citydf[,1, drop=FALSE] # keeps dimensions of df when selecting column
citydf[,'city']
city = c('Seattle', 'Chicago', 'Boston', 'Houston')
temp = c(78, 74, 50, 104)
citydf = data.frame(city, temp, row.names=c('a','b','c','d'))
colnames(citydf) # get column names in vector form
colnames(citydf) = c('CITY', 'TEMP') # rename columns
citydf[1,2] # nrow=, ncolumn=
citydf[1:3,1]
citydf[c(1,3),] # get rows 1 and three and all columns
citydf[-1,] # everything but first row
# all the same way to get column
citydf[,1, drop=FALSE] # keeps dimensions of df when selecting column
citydf[,'CITY']
citydf$city
mean(citydf$temp)
mean(citydf$temp)
mean(citydf$TEMP)
head(citydf, 4)
citydf = data.frame(city, temp, row.names=c('a','b','c','d'))
head(citydf, 4) # get first four
tail(citydf, 2)
str(citydf) # structure
citydf = data.frame(city, temp, stringsAsFactors = TRUE)
head(citydf, 4) # get first four
tail(citydf, 2) # get last two rows
str(citydf) # structure
citydf[order(citydf$temp), decreasing=TRUE]
citydf[order(citydf$temp), decreasing=TRUE,]
citydf[order(citydf$temp, decreasing=TRUE,]
citydf[order(citydf$temp, decreasing=TRUE),]
install.packages("svglite")
OFFICE.NAME
df_tot <- readRDS( "./bail_out/df_tot.RDS" )
#Problem 8
head(df_tot,3)
sum(df_tot$AMOUNT, na.rm=TRUE)
#Problem 9
df1 =df_tot %>%
filter(AMOUNT>=0) %>%
mutate(COVERAGE.PERIOD = END.DATE-START.DATE)
sd(df1$COVERAGE.PERIOD, na.rm=TRUE)
#Problem 9
df1 =df_tot %>%
filter(AMOUNT>=0) %>%
mutate(COVERAGE.PERIOD = END.DATE-START.DATE)
library(tidyverse)
library(lubridate)
#Problem 9
df1 =df_tot %>%
filter(AMOUNT>=0) %>%
mutate(COVERAGE.PERIOD = END.DATE-START.DATE)
sd(df1$COVERAGE.PERIOD, na.rm=TRUE)
#Problem 10
df_tot %>%
filter(AMOUNT>=0) %>%
filter(START.DATE>='2010-01-01'& START.DATE<='2016-12-31') %>%
group_by(year(START.DATE)) %>%
summarise(ave_annual_exp=mean(AMOUNT))
#Problem 12
OFFICE.NAME= df_tot %>%
filter(year(START.DATE)=='2016') %>%
group_by(OFFICE) %>%
summarise(totalexp=sum(AMOUNT)) %>%
arrange(desc(totalexp)) %>%
head(1)
OFFICE.NAME
#Problem 12
OFFICE.NAME= df_tot %>%
filter(year(START.DATE)=='2016') %>%
group_by(OFFICE) %>%
summarise(totalexp=sum(AMOUNT)) %>%
arrange(desc(totalexp)) %>%
head(1)[1]
OFFICE.NAME
df_tot %>%
filter(year(START.DATE)=='2016') %>%
filter(OFFICE == 'GOVERNMENT CONTRIBUTIONS') %>%
group_by(PURPOSE) %>%
summarize(purpexp = sum(AMOUNT)) %>%
arrange(desc(purpexp)) %>%
head(1)[1]
head(all_dfs4,1)
all_dfs <- readRDS( "./bail_out/all_dfs.RDS" )
# Problem 4
selectcol = function(x) {
return(x %>% select(START.DATE, END.DATE, OFFICE, PURPOSE, AMOUNT))
}
all_dfs4 = lapply(all_dfs, selectcol)
head(all_dfs4,1)
df10 = read_csv('data/2010-Q3.csv')
head(df10)
?str_remove
str_remove_all(st, ' ')
st = ' / we/23/3'
str_remove_all(st, ' ')
parse_date_time(st)
st = c('01/23/17', '2017/03/01')
parse_date_time(st)
st = c('01/23/17', '2017/03/01')
parse_date_time(st, c('ymd', 'dmy'))
df10 = read_csv('data/2011-Q3.csv')
head(df10)
class(df10$START.DATE)
str_remove_all(x$START.DATE,' ')
# Problem 5
clean_data_str = function(x){
str_remove_all(x$START.DATE,' ')
str_remove_all(x$END.DATE,' ')
ifelse(class(x$START.DATE)=='Date',x$START.DATE,
x$END.DATE= mdy(x$END.DATE)
ifelse(class(x$START.DATE)=='Date',x$START.DATE,
mdy(x$END.DATE)
}
# Problem 5
clean_data_str = function(x){
str_remove_all(x$START.DATE,' ')
str_remove_all(x$END.DATE,' ')
ifelse(class(x$START.DATE)=='Date',x$START.DATE,
mdy(x$END.DATE))
}
lapply(all_dfs, clean_data_str)
#x$START.DATE = mdy(x$START.DATE)
# fmt_df_dates = function(x){
#
# }
# st = c('01/23/17', '2017/03/01')
# parse_date_time(st, c('ymd', 'dmy'))
# str_remove_all(st, ' ')
# lapply(all_dfs4, gsub(' ', '', x=all_dfs4$START.DATE))
# \s: matches any whitespace (e.g. space, tab, newline)
# ?str_remove
# Problem 5
clean_data_str = function(x){
# str_remove_all(x$START.DATE,' ')
# str_remove_all(x$END.DATE,' ')
ifelse(class(x$START.DATE)=='Date',x$START.DATE,
mdy(x$END.DATE))
}
lapply(all_dfs, clean_data_str)
#x$START.DATE = mdy(x$START.DATE)
# fmt_df_dates = function(x){
#
# }
# st = c('01/23/17', '2017/03/01')
# parse_date_time(st, c('ymd', 'dmy'))
# str_remove_all(st, ' ')
# lapply(all_dfs4, gsub(' ', '', x=all_dfs4$START.DATE))
# \s: matches any whitespace (e.g. space, tab, newline)
# ?str_remove
# Problem 5
clean_data_str = function(x){
str_remove_all(x$START.DATE,' ')
str_remove_all(x$END.DATE,' ')
ifelse(class(x$START.DATE)=='Date',x$START.DATE,
ifesle(mdy(x$END.DATE)==TRUE ,mdy(x$END.DATE), NA)
}
# Problem 5
clean_data_str = function(x){
str_remove_all(x$START.DATE,' ')
str_remove_all(x$END.DATE,' ')
ifelse(class(x$START.DATE)=='Date',x$START.DATE,
ifesle(mdy(x$END.DATE)==TRUE ,mdy(x$END.DATE), NA))
}
lapply(all_dfs, clean_data_str)
# Problem 5
clean_data_str = function(x){
str_remove_all(x$START.DATE,' ')
str_remove_all(x$END.DATE,' ')
ifelse(class(x$START.DATE)=='Date',x$START.DATE,
ifelse(mdy(x$END.DATE)==TRUE ,mdy(x$END.DATE), NA))
}
lapply(all_dfs, clean_data_str)
#x$START.DATE = mdy(x$START.DATE)
# fmt_df_dates = function(x){
#
# }
# st = c('01/23/17', '2017/03/01')
# parse_date_time(st, c('ymd', 'dmy'))
# str_remove_all(st, ' ')
# lapply(all_dfs4, gsub(' ', '', x=all_dfs4$START.DATE))
# \s: matches any whitespace (e.g. space, tab, newline)
# ?str_remove
# Problem 5
clean_data_str = function(x){
str_remove_all(x$START.DATE,' ')
str_remove_all(x$END.DATE,' ')
ifelse(class(x$START.DATE)=='Date',x$START.DATE,
ifelse(class(mdy(x$END.DATE))=='Date' ,mdy(x$END.DATE), 'NA'))
}
lapply(all_dfs, clean_data_str)
#x$START.DATE = mdy(x$START.DATE)
# fmt_df_dates = function(x){
#
# }
# st = c('01/23/17', '2017/03/01')
# parse_date_time(st, c('ymd', 'dmy'))
# str_remove_all(st, ' ')
# lapply(all_dfs4, gsub(' ', '', x=all_dfs4$START.DATE))
# \s: matches any whitespace (e.g. space, tab, newline)
# ?str_remove
# # Problem 5
# clean_data_str = function(x){
#   str_remove_all(x$START.DATE,' ')
#   str_remove_all(x$END.DATE,' ')
#   ifelse(class(x$START.DATE)=='Date',x$START.DATE,
#          ifelse(class(mdy(x$END.DATE))=='Date' ,mdy(x$END.DATE), 'NA'))
# }
# lapply(all_dfs, clean_data_str)
#
#  #x$START.DATE = mdy(x$START.DATE)
# fmt_df_dates = function(x){
#
# }
# st = c('01/23/17', '2017/03/01')
# parse_date_time(st, c('ymd', 'dmy'))
# str_remove_all(st, ' ')
# lapply(all_dfs4, gsub(' ', '', x=all_dfs4$START.DATE))
# \s: matches any whitespace (e.g. space, tab, newline)
# ?str_remove
fmt_df_amount(df10)
# Problem 6
fmt_df_amount = function(x) {
x$AMOUNT = as.numeric(gsub(',','',x = df$AMOUNT ))
}
fmt_df_amount(df10)
# Problem 6
fmt_df_amount = function(x) {
x$AMOUNT = as.numeric(gsub(',','',x = x$AMOUNT ))
}
fmt_df_amount(df10)
head(df10)
# Problem 6
fmt_df_amount = function(x) {
x$AMOUNT = as.numeric(gsub(',','',x = x$AMOUNT ))
x$AMOUNT = as.numeric(gsub('$','',x = x$AMOUNT ))
}
fmt_df_amount(df10)
# Problem 5
clean_data_str = function(x){
str_remove_all(x$START.DATE,' ')
str_remove_all(x$END.DATE,' ')
mutate(x$START.DATE=ifelse(class(x$START.DATE)=='Date',x$START.DATE,
# Problem 4
selectcol = function(x) {
return(x %>% select(START.DATE, END.DATE, OFFICE, PURPOSE, AMOUNT))
}
all_dfs4 = lapply(all_dfs, selectcol)
# Problem 7
df_tot = rbind(all_dfs4)
dim(df_tot)
head(df_tot)
# Problem 7
df_tot = rbind(unlist(all_dfs4))
head(df_tot)
# Problem 7
df_tot = rbind(all_dfs4[[1]])
dim(df_tot)
head(df_tot)
all_dfs = lapply(all_dfs, selectcol)
#all_dfs = lapply(all_dfs, fmt_df_dates) # clean_date_str needed for fmt_fd_dates does not work
all_dfs = lapply(all_dfs, fmt_df_amount)
df_tot = rbind(all_dfs[[1]])
head(df_tot)
all_dfs <- readRDS( "./bail_out/all_dfs.RDS" )
# Problem 4
selectcol = function(x) {
return(x %>% select(START.DATE, END.DATE, OFFICE, PURPOSE, AMOUNT))
}
all_dfs = lapply(all_dfs, selectcol)
df_tot = rbind(all_dfs[[1]])
head(df_tot)
fmt_df_amount(df10)
# Problem 6
fmt_df_amount = function(x) {
x$AMOUNT = as.numeric(gsub(',','',x = x$AMOUNT ))
x$AMOUNT = as.numeric(gsub('$','',x = x$AMOUNT ))
}
fmt_df_amount(df10)
head(df10)
#all_dfs = lapply(all_dfs, fmt_df_dates) # clean_date_str needed for fmt_fd_dates does not work
all_dfs = lapply(all_dfs, fmt_df_amount)
head(all_dfs)
?list.files
list.files('./data')
# Problem 1
csv_filenames=list.files('./data', pattern="*.csv")
csv_filenames
# Problem 2
paste0('./data/',csv_filenames)
# Problem 3
#all_dfs=
readfile = function(x) {
read_csv(x)
}
all_dfs= lapply(csv_filepaths, readfile)
# Problem 2
csv_filepaths= paste0('./data/',csv_filenames)
# Problem 3
#all_dfs=
readfile = function(x) {
read_csv(x)
}
all_dfs= lapply(csv_filepaths, readfile)
head(all_dfs)
# Problem 1
csv_filenames=list.files('./data', pattern="*.csv")
all_dfs <- readRDS( "./bail_out/all_dfs.RDS" )
# Problem 4
selectcol = function(x) {
return(x %>% select(START.DATE, END.DATE, OFFICE, PURPOSE, AMOUNT))
}
all_dfs = lapply(all_dfs, selectcol)
# Problem 7
#all_dfs = lapply(all_dfs, fmt_df_dates) # clean_date_str needed for fmt_fd_dates does not work
#all_dfs = lapply(all_dfs, fmt_df_amount) # this is doing something weird
df_tot = rbind(all_dfs[[1]]) # how to stitch the dfs together once uniform and clean
head(all_dfs)
head(all_tot)
head(adf_tot)
head(af_tot)
head(df_tot)
unique(df_tot[grepl('ANDRE CARSON', df_tot$OFFICE)]))
unique(df_tot[grepl('ANDRE CARSON', df_tot$OFFICE)])
df_tot <- readRDS( "./bail_out/df_tot.RDS" )
#Problem 8
head(df_tot,3)
sum(df_tot$AMOUNT, na.rm=TRUE)
#Problem 8
sum(df_tot$AMOUNT, na.rm=TRUE)
#Problem 9
df1 =df_tot %>%
filter(AMOUNT>=0) %>%
mutate(COVERAGE.PERIOD = END.DATE-START.DATE)
sd(df1$COVERAGE.PERIOD, na.rm=TRUE)
#Problem 10
df_tot %>%
filter(AMOUNT>=0) %>%
filter(START.DATE>='2010-01-01'& START.DATE<='2016-12-31') %>%
group_by(year(START.DATE)) %>%
summarise(ave_annual_exp=mean(AMOUNT))
#Problem 11
unique(df_tot[grepl('ANDRE CARSON', df_tot$OFFICE)])
st = ' aasdf 2 34, s'
str_replace_all(st, c((\d)= '' ))
str_replace_all(st, c(\d= '' ))
str_replace_all(st, c('\d'= '' ))
str_replace_all(st, c(('\d')= '' ))
str_replace_all(st, c('[\d]'= '' ))
str_replace_all(st, c('[2]'= '' ))
str_replace_all(st, c('\d'= '' ))
str_replace_all(st, c('(\d)'= '' ))
str_replace_all(st, c('[^0-9]'= '' ))
str_replace_all(st, c('[^a-zA-Z]'= '' ))
str_replace_all(st, c(' +'=' ' ))
st = ' aasdf  2 34, s'
str_replace_all(st, c(' +'=' ' ))
#Problem 11
clean_text_col = function(x) {
rstr= str_replace_all(x, c('[^a-zA-Z]'= '',
' +'=' ')
)
rstr = trimws(rstr, which='both', whitespace='[ \t\r\n]')
str_to_upper(replace_str)
}
st = ' aasdf  2 34, s'
# str_replace_all(st, c(' +'=' ' ))
clean_text_col(st)
clean_text_col = function(x) {
rstr= str_replace_all(x, c('[^a-zA-Z]'= '',
' +'=' ')
)
rstr = trimws(rstr, which='both', whitespace='[ \t\r\n]')
str_to_upper(rstr)
}
st = ' aasdf  2 34, s'
# str_replace_all(st, c(' +'=' ' ))
clean_text_col(st)
# use function to clean
df_tot %>%
mutate(OFFICE.CLEAN = clean_text_col(df_tot$OFFICE))
# use function to clean
df_tot %>%
mutate(OFFICE.CLEAN = clean_text_col(df_tot$OFFICE),
PURPOSE.CLEAN = clean_text_col(df_tot$PURPOSE))
str_to_upper(rstr)
#Problem 11
clean_text_col = function(x) {
rstr= str_replace_all(x, c('[^a-zA-Z]'= '',
' +'=' ')
)
rstr = trimws(rstr, which=c('right', 'left'), whitespace='[ \t\r\n]')
str_to_upper(rstr)
}
st = ' aasdf  2 34, s'
clean_text_col(st)
st = ' aasdf  2 34, s'
clean_text_col(st)
clean_text_col = function(x) {
rstr= str_replace_all(x, c('[^a-zA-Z]'= '',
' +'=' ')
)
rstr = trimws(rstr, which='both', whitespace='[ \t\r\n]')
str_to_upper(rstr)
}
st = ' aasdf  2 34, s'
clean_text_col(st)
#Problem 12
OFFICE.NAME= df_tot %>%
filter(year(START.DATE)=='2016') %>%
group_by(OFFICE.CLEAN) %>%
summarise(totalexp=sum(AMOUNT)) %>%
arrange(desc(totalexp)) %>%
head(1)[1]
# use function to clean
df_tot = df_tot %>%
mutate(OFFICE.CLEAN = clean_text_col(df_tot$OFFICE),
PURPOSE.CLEAN = clean_text_col(df_tot$PURPOSE))
#Problem 12
OFFICE.NAME= df_tot %>%
filter(year(START.DATE)=='2016') %>%
group_by(OFFICE.CLEAN) %>%
summarise(totalexp=sum(AMOUNT)) %>%
arrange(desc(totalexp)) %>%
head(1)[1]
OFFICE.NAME
PURPOSE.NAME= df_tot %>%
filter(year(START.DATE)=='2016') %>%
filter(OFFICE.CLEAN == 'GOVERNMENTCONTRIBUTIONS') %>%
group_by(PURPOSE) %>%
summarize(purpexp = sum(AMOUNT)) %>%
arrange(desc(purpexp)) %>%
head(1)[1]
PURPOSE.NAME
load("~/Dropbox/NYCDSA/Class/5Data Analysis with R/Stats/Foundations_of_Stats_HW_Solutions.rmd")
load("~/Dropbox/NYCDSA/Class/5Data Analysis with R/Stats/Foundations_of_Stats_HW_Solutions.rmd")
load("~/Desktop/rshiny/target_eda.Rmd")
shiny::runApp('Desktop/rshiny')
setwd("~/Desktop/rshiny")
runApp()
